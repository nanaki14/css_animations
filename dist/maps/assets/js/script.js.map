{"version":3,"sources":["/Users/masa/git/css_animations/node_modules/gulp-browserify/node_modules/browser-pack/_prelude.js","/Users/masa/git/css_animations/node_modules/gulp-browserify/node_modules/base64-js/lib/b64.js","/Users/masa/git/css_animations/node_modules/gulp-browserify/node_modules/buffer/index.js","/Users/masa/git/css_animations/node_modules/gulp-browserify/node_modules/process/browser.js","/Users/masa/git/css_animations/node_modules/ieee754/index.js","/Users/masa/git/css_animations/src/assets/js/fake_856e8b1a.js"],"names":["e","t","n","r","process","global","Buffer","__argument0","__argument1","__argument2","__argument3","__filename","__dirname","exports","PLUS","code","PLUS_URL_SAFE","SLASH","SLASH_URL_SAFE","NUMBER","UPPER","LOWER","v","arr","length","placeHolders","num","i","temp","extraBytes","output","Uint8Array","Array","b64ToByteArray","uint8ToBase64","subject","encoding","noZero","_typeof","coerce","type","byteLength","buf","this","readUInt8","_hexWrite","string","offset","remaining","byte","_utf8Write","_charsWritten","blitBuffer","utf8ToBytes","_asciiWrite","asciiToBytes","_binaryWrite","_base64Write","base64ToBytes","_utf16leWrite","utf16leToBytes","_base64Slice","start","end","_utf8Slice","tmp","_asciiSlice","ret","_binarySlice","_hexSlice","len","out","_utf16leSlice","res","_readUInt16","littleEndian","noAssert","val","_readUInt32","_readInt16","_readInt32","_readFloat","_readDouble","_writeUInt16","value","_writeUInt32","_writeInt16","_writeInt32","_writeFloat","_writeDouble","stringtrim","str","trim","clamp","index","defaultValue","isArray","isArrayish","toHex","byteArray","push","charCodeAt","j","lo","hi","src","dst","decodeUtf8Char","verifuint","max","verifsint","min","verifIEEE754","assert","test","message","base64","require","ieee754","SlowBuffer","INSPECT_MAX_BYTES","poolSize","_useTypedArrays","foo","subarray","isEncoding","toLowerCase","isBuffer","b","_isBuffer","concat","list","totalLength","pos","prototype","write","undefined","swap","toString","Number","self","toJSON","copy","target","target_start","slice","newBuf","get","set","readUInt16LE","readUInt16BE","readUInt32LE","readUInt32BE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","fill","inspect","toArrayBuffer","buffer","BP","_augment","noop","module","nextTick","window","setImmediate","postMessage","addEventListener","source","stopPropagation","shift","fn","title","browser","env","argv","on","addListener","once","off","removeListener","removeAllListeners","emit","binding","name","cwd","chdir","dir","read","isLE","mLen","nBytes","m","d","nBits","eLen","eBias","Infinity","c","eMax","LN2","console","log"],"mappings":"oOAAA,QAAAA,GAAAC,EAAAC,EAAAC,wZCAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,IAGA,SAAAC,oCAiBA,cACAC,GAAAC,IACAC,EAAA,OAEAC,GAAAF,IACAG,EAAA,KAEAC,GAAA,MAEA,GAAAJ,EAAAI,EAAA,GACA,OACA,GAAAJ,EACAK,MACA,GAAAL,EAAAM,EACA,6CA2BAC,gBAvBAC,kCAGA,0DAQAC,qDACA,uBAGAC,sBAGAD,aAEA,uGAOA,oBACA,iBACA,KACA,2DAIA,IACA,2EAEA,SACA,OACA,QAGAD,oCA9EA,0EAwFAG,MANAC,KAGAH,iBADA,8DAaA,8DALA,OAMAI,UAIAC,OACA,gBACA,WACA,aACA,OACA,IACA,WACA,mCACA,WACA,cACA,cACA,OACA,UAIAC,SAjHA,+BACAC,WACAC,uBAEA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,iBA0GAC,kBACAC,+BACArB,+VC7HA,SAAAT,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAkDA,QAAAN,GAAA6B,EAAAC,EAAAC,uBAEA/B,IAAA,MAAA,IAAAA,GAAA6B,EAAAC,EACAC,aAEA,KAAAF,EAAA,YAAAG,QAAAH,yCAKAA,qBAEA,OAKAX,MACA,aAAAA,EAAAe,EACAJ,OAAA,IACA,WADAK,EACAhB,EAAAlB,EAAAmC,WAAAN,EACAC,OAAA,CAAA,GACA,WADAI,kBAIA,wDAHAhB,GAAAe,EAAAJ,EAAAX,WAKAkB,iDAGAlB,OAGAmB,cACAnB,eACA,MAGAG,8DAGAQ,2CAIAA,GAAAO,EAAAf,GAAAQ,EAAAS,UACAjB,GAAAe,EAAAf,GAAAQ,EAEAR,oCAGAS,qEAGA,QAIAM,GA0FA,QAAAG,GAAAH,EAAAI,EAAAC,EAAAvB,gBAEA,iBACAuB,cAIAvB,UAEAwB,KAJAA,UASAxB,gBACA,kCAGA,uBAEA,gCACA,gBACA,6BACAyB,yBAEA,IACAtB,EAEA,QAAAuB,GAAAR,EAAAI,EAAAC,EAAAvB,YAEA2B,cAAAC,EAAAC,EAAAP,GAAAJ,EAAAK,EACAvB,GAGA,QAAA8B,GAAAZ,EAAAI,EAAAC,EAAAvB,YAEA2B,cAAAC,EAAAG,EAAAT,GAAAJ,EAAAK,EACAvB,GAGA,QAAAgC,GAAAd,EAAAI,EAAAC,EAAAvB,kBAEAA,GAEA,QAAAiC,GAAAf,EAAAI,EAAAC,EAAAvB,YAEA2B,cAAAC,EAAAM,EAAAZ,GAAAJ,EAAAK,EACAvB,GAGA,QAAAmC,GAAAjB,EAAAI,EAAAC,EAAAvB,YAEA2B,cAAAC,EAAAQ,EAAAd,GAAAJ,EAAAK,EACAvB,GAiJA,QAAAqC,GAAAnB,EAAAoB,EAAAC,8CAGArB,6BAEAqB,IAGA,QAAAC,GAAAtB,EAAAoB,EAAAC,SAEA,KACA,uBACAA,gEAIApC,MACA,yBAEA,eAIAsC,GAEA,QAAAC,GAAAxB,EAAAoB,EAAAC,SAEA,uBACAA,mBAEApC,6BACAA,UACAwC,GAEA,QAAAC,GAAA1B,EAAAoB,EAAAC,gBAEAA,GAEA,QAAAM,GAAA3B,EAAAoB,EAAAC,WAEAvC,qBAEA,sBACA8C,aAEA,sBAEA3C,UAEA4C,GAEA,QAAAC,GAAA9B,EAAAoB,EAAAC,uBAEAA,KACA,mDAEA,kBAEAU,GA2CA,QAAAC,GAAAhC,EAAAK,EAAA4B,EAAAC,6BAGA,oDACA,iCACA,gDAGApD,eACA8C,OAGAO,iBAEA9B,OACAuB,IAAAO,GAAAnC,EAAAK,EAAA,IACA,aAEA,MACAuB,IAAAO,GAAAnC,EAAAK,EACA,KAEA8B,GAUA,QAAAC,GAAApC,EAAAK,EAAA4B,EAAAC,6BAGA,oDACA,iCACA,gDAGApD,eACA8C,OAGAO,iBAEAP,IAAAO,EAAAnC,EAAAK,EAAA,IACA,QACAuB,IAAAO,GAAAnC,EAAAK,EAAA,IACA,QACAA,OACAuB,IAAAO,GAAAnC,EAAAK,EAAA,IAAA,KACA,SAEAuB,IAAAO,EAAAnC,EAAAK,EAAA,IACA,QACAuB,IAAAO,GAAAnC,EAAAK,EAAA,IACA,OACAuB,IAAAO,GAAAnC,EAAAK,EACA,kBACA,GAEA8B,GA2BA,QAAAE,GAAArC,EAAAK,EAAA4B,EAAAC,gCAGA,oDACA,iCACA,+CAGApD,wBAIA,SACA,UAEA,GADA,MAAAqD,EAAA,GAGAA,GAUA,QAAAG,GAAAtC,EAAAK,EAAA4B,EAAAC,gCAGA,oDACA,iCACA,+CAGApD,wBAIA,SACA,eAEA,GADA,WAAAqD,EAAA,GAGAA,GAUA,QAAAI,GAAAvC,EAAAK,EAAA4B,EAAAC,oCAGA,4CACA,wDAGA,GAUA,QAAAM,GAAAxC,EAAAK,EAAA4B,EAAAC,oCAGA,4CACA,wDAGA,GAuBA,QAAAO,GAAAzC,EAAA0C,EAAArC,EAAA4B,EAAAC,8BAGA,uCACA,oDACA,iCACA,4CACA,gBAGApD,eACA8C,6CAIA3C,IAAAyD,EAAA,KAAA,GAAAT,EAAAhD,EAAA,EACAA,MACA,GADAgD,EAAAhD,EAAA,EAAAA,GAYA,QAAA0D,GAAA3C,EAAA0C,EAAArC,EAAA4B,EAAAC,8BAGA,uCACA,oDACA,iCACA,4CACA,qBAGApD,eACA8C,6CAIA3C,GAAAyD,IAAA,GAAAT,EAAAhD,EAAA,EAAAA,GACA,IA4BA,QAAA2D,GAAA5C,EAAA0C,EAAArC,EAAA4B,EAAAC,8BAGA,uCACA,oDACA,iCACA,mDACA,aAGApD,YAIA,EAAA2D,EAAAzC,EAAA0C,EAAArC,EAAA4B,EACAC,GAAAO,EAAAzC,EAAA,MAAA0C,EAAA,EAAArC,EAAA4B,EAEAC,IAUA,QAAAW,GAAA7C,EAAA0C,EAAArC,EAAA4B,EAAAC,8BAGA,uCACA,oDACA,iCACA,wDACA,kBAGApD,YAIA,EAAA6D,EAAA3C,EAAA0C,EAAArC,EAAA4B,EACAC,GAAAS,EAAA3C,EAAA,WAAA0C,EAAA,EAAArC,EAAA4B,EAEAC,IAUA,QAAAY,GAAA9C,EAAA0C,EAAArC,EAAA4B,EAAAC,8BAGA,uCACA,oDACA,iCACA,mEACA,6BAGApD,2BAIA,GAUA,QAAAiE,GAAA/C,EAAA0C,EAAArC,EAAA4B,EAAAC,8BAGA,uCACA,oDACA,0BACApD,OACA,oEACA,8BAGAA,2BAIA,GAsEA,QAAAkE,GAAAC,mBAEAC,8BACA,IA4DA,QAAAC,GAAAC,EAAAxB,EAAAyB,4BAEAA,aAEAzB,OACAwB,MACAxB,OACAwB,EACA,GAEA,QAAAvD,GAAAf,yBAKAA,SACAA,EAEA,QAAAwE,GAAA7D,2CAGA,uDACAA,GAEA,QAAA8D,GAAA9D,2BAEAA,IAAAA,GACA,gBADA,KAAAA,EAAA,YAAAG,QAAAH,KAEA,gBADAA,GAAAX,OAGA,QAAA0E,GAAAhG,8BAEA,eACA,IAEA,QAAAmD,GAAAsC,mCAGA,oBACAhE,SACA,IAAAwE,EAAAC,KAAAT,EAAAU,WACA1E,QACA,OACAA,sBACAA,iEACA,oBACA2E,yBACA,YAGAH,GAEA,QAAA5C,GAAAoC,0CAKA,2BAEAQ,GAEA,QAAAvC,GAAA+B,eAEAY,yCAGA5E,QACA,MACA,WACA4E,UACAC,SAGAL,GAEA,QAAAzC,GAAAiC,wBAEAA,GAEA,QAAAvC,GAAAqD,EAAAC,EAAA3D,EAAAvB,0CAIAA,qBAEAG,SAEAA,GAEA,QAAAgF,GAAAhB,iCAGAA,+CAUA,QAAAiB,GAAAxB,EAAAyB,wBAEA,gDACA,mEACA,mEACA,oCAEA,QAAAC,GAAA1B,EAAAyB,EAAAE,wBAEA,gDACA,kDACA,gEACA,oCAEA,QAAAC,GAAA5B,EAAAyB,EAAAE,wBAEA,gDACA,kDACA,4CAEA,QAAAE,GAAAC,EAAAC,4BAEA,oBA7kCA,GAAAC,GAAAC,EAAA,aACAC,EAAAD,EACA,UACAxG,GAAAP,OAAAA,EACAO,EAAA0G,WAAAjH,EACAO,EAAA2G,kBAAA,GACAlH,EAAAmH,SACA,KAMAnH,EAAAoH,gBAAA,qCAQA,oBACAhF,6CAEAiF,OAAA,kBAAApG,GAAAqG,yBAGA,MA8EAtH,EAAAuH,WAAA,SAAAzF,oBAEA0F,mBACA,UACA,WACA,YACA,YACA,aACA,aACA,UACA,WACA,YACA,cACA,kBACA,CACA,gBACA,IAGAxH,EAAAyH,SAAA,SAAAC,oCAEAC,YAEA3H,EAAAmC,WAAA,SAAAkD,EAAAvD,MAEA+B,aACA,MACA,YACA,iBACA,CACA,WACA,WACA,eACA3C,MACA,WACA,YACA,aACA,UACAA,MACA,WACA,gBACAA,MACA,WACA,WACA,YACA,cACA,aACA,UACA,MACA,yBACA,0BAEA2C,IAEA7D,EAAA4H,OAAA,SAAAC,EAAAC,aAEA,iGAIA,4BAEA,MAGAzG,+BAEA,6BAEAH,mBAIA4G,KACA,yBACA,SACAzG,YACA0G,QACA7G,aAEAkB,IA6DApC,EAAAgI,UAAAC,MAAA,SAAAzF,EAAAC,EAAAvB,EAAAY,kCAMAZ,QACAgH,eAGApG,IACAW,IACAvB,IACAiH,eAGA,oBACA1F,cAIAvB,UAEAwB,KAJAA,sBAOA8E,iBAEA3D,UACA/B,OACA,mBACAZ,EACA,WACA,WACA,qBACAA,EACA,WACA,qBACAA,EACA,WACA,sBACAA,EACA,WACA,sBACAA,EACA,WACA,WACA,YACA,cACA,wBACAA,EACA,MACA,yBACA,0BAEA2C,IAEA7D,EAAAgI,UAAAI,SAAA,SAAAtG,EAAA0B,EAAAC,SAEApB,4BAEAmF,2BACA,SACAU,OAAAG,OACA5E,GAAAA,EAAA6E,EACApH,UAGAsC,EAAA,MACA,MAEAK,UACA/B,OACA,cACA2B,EACA,WACA,WACA,gBACAA,EACA,WACA,gBACAA,EACA,WACA,iBACAA,EACA,WACA,iBACAA,EACA,WACA,WACA,YACA,cACA,mBACAA,EACA,MACA,yBACA,0BAEAI,IAEA7D,EAAAgI,UAAAO,OAAA,uBAGA,yDACA,KAIAvI,EAAAgI,UAAAQ,KAAA,SAAAC,EAAAC,EAAAlF,EAAAC,SAEApB,cAEA,qBACAnB,cACA,6CAOA,uCACAA,OACA,gDACA,iDACA,kCAGAA,SAAAuC,EAAApB,KACAnB,qBACAsC,IAAAC,EAAAgF,EAAAvH,OAAAwH,EACAlF,WAEAA,+CAGAnC,kBACAmC,oCAEAkF,KA+DA1I,EAAAgI,UAAAW,MAAA,SAAAnF,EAAAC,cAEAvC,kBACA,WACA8C,uDAGAP,gBAEAD,oBACA,2BAEAA,SAEAoF,IAIA5I,EAAAgI,UAAAa,IAAA,SAAApG,sBAEA,4EACAA,IAGAzC,EAAAgI,UAAAc,IAAA,SAAA9H,EAAAyB,sBAEA,+EACAA,IAEAzC,EAAAgI,UAAA1F,UAAA,SAAAG,EAAA6B,iCAGA,kCACA,kDAGApD,oBAGAuB,IA0BAzC,EAAAgI,UAAAe,aAAA,SAAAtG,EAAA6B,sBAEAA,IAEAtE,EAAAgI,UAAAgB,aAAA,SAAAvG,EAAA6B,sBAEAA,IAkCAtE,EAAAgI,UAAAiB,aAAA,SAAAxG,EAAA6B,sBAEAA,IAEAtE,EAAAgI,UAAAkB,aAAA,SAAAzG,EAAA6B,sBAEAA,IAEAtE,EAAAgI,UAAAmB,SAAA,SAAA1G,EAAA6B,wBAGA,SACA,kCACA,kDAGApD,eAGA,cAEA,GADA,IAAAmB,KAAAI,GAAA,GACAJ,KAEAI,KAqBAzC,EAAAgI,UAAAoB,YAAA,SAAA3G,EAAA6B,sBAEAA,IAEAtE,EAAAgI,UAAAqB,YAAA,SAAA5G,EAAA6B,sBAEAA,IAqBAtE,EAAAgI,UAAAsB,YAAA,SAAA7G,EAAA6B,sBAEAA,IAEAtE,EAAAgI,UAAAuB,YAAA,SAAA9G,EAAA6B,sBAEAA,IAWAtE,EAAAgI,UAAAwB,YAAA,SAAA/G,EAAA6B,sBAEAA,IAEAtE,EAAAgI,UAAAyB,YAAA,SAAAhH,EAAA6B,sBAEAA,IAWAtE,EAAAgI,UAAA0B,aAAA,SAAAjH,EAAA6B,sBAEAA,IAEAtE,EAAAgI,UAAA2B,aAAA,SAAAlH,EAAA6B,sBAEAA,IAEAtE,EAAAgI,UAAA4B,WAAA,SAAA9E,EAAArC,EAAA6B,8BAGA,wCACA,kCACA,4CACA,+BAKAQ,IAsBA9E,EAAAgI,UAAA6B,cAAA,SAAA/E,EAAArC,EAAA6B,iBAEAA,IAEAtE,EAAAgI,UAAA8B,cAAA,SAAAhF,EAAArC,EAAA6B,iBAEAA,IAqBAtE,EAAAgI,UAAA+B,cAAA,SAAAjF,EAAArC,EAAA6B,iBAEAA,IAEAtE,EAAAgI,UAAAgC,cAAA,SAAAlF,EAAArC,EAAA6B,iBAEAA,IAEAtE,EAAAgI,UAAAiC,UAAA,SAAAnF,EAAArC,EAAA6B,8BAGA,wCACA,kCACA,iDACA,cAGApD,YAGA,EAAAmB,KAAAuH,WAAA9E,EAAArC,EACA6B,GAAAjC,KAAAuH,WAAA,IAAA9E,EAAA,EAAArC,EAEA6B,KAqBAtE,EAAAgI,UAAAkC,aAAA,SAAApF,EAAArC,EAAA6B,iBAEAA,IAEAtE,EAAAgI,UAAAmC,aAAA,SAAArF,EAAArC,EAAA6B,iBAEAA,IAqBAtE,EAAAgI,UAAAoC,aAAA,SAAAtF,EAAArC,EAAA6B,iBAEAA,IAEAtE,EAAAgI,UAAAqC,aAAA,SAAAvF,EAAArC,EAAA6B,iBAEAA,IAkBAtE,EAAAgI,UAAAsC,aAAA,SAAAxF,EAAArC,EAAA6B,iBAEAA,IAEAtE,EAAAgI,UAAAuC,aAAA,SAAAzF,EAAArC,EAAA6B,iBAEAA,IAmBAtE,EAAAgI,UAAAwC,cAAA,SAAA1F,EAAArC,EAAA6B,iBAEAA,IAEAtE,EAAAgI,UAAAyC,cAAA,SAAA3F,EAAArC,EAAA6B,iBAEAA,IAGAtE,EAAAgI,UAAA0C,KAAA,SAAA5F,EAAAtB,EAAAC,YAEA,SACA,cACAvC,4CAGA,oCAGA,gCACA,6DAMA,8CACA,iDAGA4D,IAGA9E,EAAAgI,UAAA2C,QAAA,+BAGAzJ,kCAEAG,4BACA,QACA,KACA,oCAGA,KAMArB,EAAAgI,UAAA4C,cAAA,6CAEA,yCAEAC,qCAEA3J,8BACA,YACAG,YACAwJ,uBAGA,sDAWA,IAAAC,GAAA9K,EACAgI,SAIAhI,GAAA+K,SAAA,SAAA9J,uBAEA,WAGA4H,aACAC,YAGAD,YACAC,cAEAb,mBACAG,4BACAA,oBACAG,gBACAC,eACAG,oBACArG,2BACAyG,8BACAC,8BACAC,8BACAC,0BACAC,yBACAC,4BACAC,4BACAC,4BACAC,4BACAC,4BACAC,6BACAC,8BACAC,4BACAC,6BACAC,gCACAC,gCACAC,gCACAC,4BACAC,2BACAC,8BACAC,8BACAC,8BACAC,8BACAC,8BACAC,+BACAC,gCACAC,uBACAC,iBACAC,0BACAC,cAEA3J,2WCt9BA,SAAAnB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GA6CA,QAAA0K,MA1CA,GAAAlL,GAAAmL,EAAA1K,UAEAT,GAAAoL,SAAA,iBAEA,4BAAAC,OACAC,eACA,4BAAAD,OAAAE,aAAAF,OACAG,6EAOA,uEAGAC,8DAEAC,8BACA,GACAC,aAIA,sBAGAC,qCACA,sCAKA,OAGA5L,EAAA6L,MAAA,UACA7L,EAAA8L,SAAA,EACA9L,EAAA+L,OACA/L,EAAAgM,QAIAhM,EAAAiM,GAAAf,EACAlL,EAAAkM,YAAAhB,EACAlL,EAAAmM,KAAAjB,EACAlL,EAAAoM,IAAAlB,EACAlL,EAAAqM,eAAAnB,EACAlL,EAAAsM,mBAAApB,EACAlL,EAAAuM,KACArB,EACAlL,EAAAwM,QAAA,SAAAC,mBAEA,qCAGAzM,EAAA0M,IAAA,sBACA1M,EAAA2M,MAAA,SAAAC,mBAEA,uXC/DA,SAAA5M,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACAC,EAAAoM,KAAA,SAAA9B,EAAApI,EAAAmK,EAAAC,EAAAC,SAEAC,UACA,WACA,OACA,KACA,UACA,SACA,QACA1L,UAEA2L,cAEA,OACAC,KACAC,gDAGA,OACAD,KACAJ,6CAIAM,6BAEAC,EAAAA,yBAEAP,MACAM,gCAEAN,IAEAtM,EAAA0H,MAAA,SAAA4C,EAAA/F,EAAArC,EAAAmK,EAAAC,EAAAC,WAEAO,UACA,WACA,OACA,2CACA,UACA,SACA,wBACA,iBAEAvI,mCAGA,IACAwI,kCAEAC,8BAEA7N,OACA,eAGA2N,iBAEAF,YAGAzN,OACA,aAIA,IACA4N,gCAEAT,MACAM,mCAEAN,KACA,mDAMAE,KACAF,+CAGA,+RCpFA,SAAA/M,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACAkN,QAAAC,IACA","file":"../../../assets/js/script.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){\nvar lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n;(function (exports) {\n\t'use strict';\n\n  var Arr = (typeof Uint8Array !== 'undefined')\n    ? Uint8Array\n    : Array\n\n\tvar PLUS   = '+'.charCodeAt(0)\n\tvar SLASH  = '/'.charCodeAt(0)\n\tvar NUMBER = '0'.charCodeAt(0)\n\tvar LOWER  = 'a'.charCodeAt(0)\n\tvar UPPER  = 'A'.charCodeAt(0)\n\tvar PLUS_URL_SAFE = '-'.charCodeAt(0)\n\tvar SLASH_URL_SAFE = '_'.charCodeAt(0)\n\n\tfunction decode (elt) {\n\t\tvar code = elt.charCodeAt(0)\n\t\tif (code === PLUS ||\n\t\t    code === PLUS_URL_SAFE)\n\t\t\treturn 62 // '+'\n\t\tif (code === SLASH ||\n\t\t    code === SLASH_URL_SAFE)\n\t\t\treturn 63 // '/'\n\t\tif (code < NUMBER)\n\t\t\treturn -1 //no match\n\t\tif (code < NUMBER + 10)\n\t\t\treturn code - NUMBER + 26 + 26\n\t\tif (code < UPPER + 26)\n\t\t\treturn code - UPPER\n\t\tif (code < LOWER + 26)\n\t\t\treturn code - LOWER + 26\n\t}\n\n\tfunction b64ToByteArray (b64) {\n\t\tvar i, j, l, tmp, placeHolders, arr\n\n\t\tif (b64.length % 4 > 0) {\n\t\t\tthrow new Error('Invalid string. Length must be a multiple of 4')\n\t\t}\n\n\t\t// the number of equal signs (place holders)\n\t\t// if there are two placeholders, than the two characters before it\n\t\t// represent one byte\n\t\t// if there is only one, then the three characters before it represent 2 bytes\n\t\t// this is just a cheap hack to not do indexOf twice\n\t\tvar len = b64.length\n\t\tplaceHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0\n\n\t\t// base64 is 4/3 + up to two characters of the original data\n\t\tarr = new Arr(b64.length * 3 / 4 - placeHolders)\n\n\t\t// if there are placeholders, only get up to the last complete 4 chars\n\t\tl = placeHolders > 0 ? b64.length - 4 : b64.length\n\n\t\tvar L = 0\n\n\t\tfunction push (v) {\n\t\t\tarr[L++] = v\n\t\t}\n\n\t\tfor (i = 0, j = 0; i < l; i += 4, j += 3) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))\n\t\t\tpush((tmp & 0xFF0000) >> 16)\n\t\t\tpush((tmp & 0xFF00) >> 8)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\tif (placeHolders === 2) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)\n\t\t\tpush(tmp & 0xFF)\n\t\t} else if (placeHolders === 1) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)\n\t\t\tpush((tmp >> 8) & 0xFF)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\treturn arr\n\t}\n\n\tfunction uint8ToBase64 (uint8) {\n\t\tvar i,\n\t\t\textraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes\n\t\t\toutput = \"\",\n\t\t\ttemp, length\n\n\t\tfunction encode (num) {\n\t\t\treturn lookup.charAt(num)\n\t\t}\n\n\t\tfunction tripletToBase64 (num) {\n\t\t\treturn encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)\n\t\t}\n\n\t\t// go through the array every three bytes, we'll deal with trailing stuff later\n\t\tfor (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n\t\t\ttemp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n\t\t\toutput += tripletToBase64(temp)\n\t\t}\n\n\t\t// pad the end with zeros, but make sure to not forget the extra bytes\n\t\tswitch (extraBytes) {\n\t\t\tcase 1:\n\t\t\t\ttemp = uint8[uint8.length - 1]\n\t\t\t\toutput += encode(temp >> 2)\n\t\t\t\toutput += encode((temp << 4) & 0x3F)\n\t\t\t\toutput += '=='\n\t\t\t\tbreak\n\t\t\tcase 2:\n\t\t\t\ttemp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])\n\t\t\t\toutput += encode(temp >> 10)\n\t\t\t\toutput += encode((temp >> 4) & 0x3F)\n\t\t\t\toutput += encode((temp << 2) & 0x3F)\n\t\t\t\toutput += '='\n\t\t\t\tbreak\n\t\t}\n\n\t\treturn output\n\t}\n\n\texports.toByteArray = b64ToByteArray\n\texports.fromByteArray = uint8ToBase64\n}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))\n\n}).call(this,require(\"km4Umf\"),typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {},require(\"buffer\").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],\"/../../../node_modules/gulp-browserify/node_modules/base64-js/lib/b64.js\",\"/../../../node_modules/gulp-browserify/node_modules/base64-js/lib\")","(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = Buffer\nexports.INSPECT_MAX_BYTES = 50\nBuffer.poolSize = 8192\n\n/**\n * If `Buffer._useTypedArrays`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (compatible down to IE6)\n */\nBuffer._useTypedArrays = (function () {\n  // Detect if browser supports Typed Arrays. Supported browsers are IE 10+, Firefox 4+,\n  // Chrome 7+, Safari 5.1+, Opera 11.6+, iOS 4.2+. If the browser does not support adding\n  // properties to `Uint8Array` instances, then that's the same as no `Uint8Array` support\n  // because we need to be able to add all the node Buffer API methods. This is an issue\n  // in Firefox 4-29. Now fixed: https://bugzilla.mozilla.org/show_bug.cgi?id=695438\n  try {\n    var buf = new ArrayBuffer(0)\n    var arr = new Uint8Array(buf)\n    arr.foo = function () { return 42 }\n    return 42 === arr.foo() &&\n        typeof arr.subarray === 'function' // Chrome 9-10 lack `subarray`\n  } catch (e) {\n    return false\n  }\n})()\n\n/**\n * Class: Buffer\n * =============\n *\n * The Buffer constructor returns instances of `Uint8Array` that are augmented\n * with function properties for all the node `Buffer` API functions. We use\n * `Uint8Array` so that square bracket notation works as expected -- it returns\n * a single octet.\n *\n * By augmenting the instances, we can avoid modifying the `Uint8Array`\n * prototype.\n */\nfunction Buffer (subject, encoding, noZero) {\n  if (!(this instanceof Buffer))\n    return new Buffer(subject, encoding, noZero)\n\n  var type = typeof subject\n\n  // Workaround: node's base64 implementation allows for non-padded strings\n  // while base64-js does not.\n  if (encoding === 'base64' && type === 'string') {\n    subject = stringtrim(subject)\n    while (subject.length % 4 !== 0) {\n      subject = subject + '='\n    }\n  }\n\n  // Find the length\n  var length\n  if (type === 'number')\n    length = coerce(subject)\n  else if (type === 'string')\n    length = Buffer.byteLength(subject, encoding)\n  else if (type === 'object')\n    length = coerce(subject.length) // assume that object is array-like\n  else\n    throw new Error('First argument needs to be a number, array or string.')\n\n  var buf\n  if (Buffer._useTypedArrays) {\n    // Preferred: Return an augmented `Uint8Array` instance for best performance\n    buf = Buffer._augment(new Uint8Array(length))\n  } else {\n    // Fallback: Return THIS instance of Buffer (created by `new`)\n    buf = this\n    buf.length = length\n    buf._isBuffer = true\n  }\n\n  var i\n  if (Buffer._useTypedArrays && typeof subject.byteLength === 'number') {\n    // Speed optimization -- use set if we're copying from a typed array\n    buf._set(subject)\n  } else if (isArrayish(subject)) {\n    // Treat array-ish objects as a byte array\n    for (i = 0; i < length; i++) {\n      if (Buffer.isBuffer(subject))\n        buf[i] = subject.readUInt8(i)\n      else\n        buf[i] = subject[i]\n    }\n  } else if (type === 'string') {\n    buf.write(subject, 0, encoding)\n  } else if (type === 'number' && !Buffer._useTypedArrays && !noZero) {\n    for (i = 0; i < length; i++) {\n      buf[i] = 0\n    }\n  }\n\n  return buf\n}\n\n// STATIC METHODS\n// ==============\n\nBuffer.isEncoding = function (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'binary':\n    case 'base64':\n    case 'raw':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.isBuffer = function (b) {\n  return !!(b !== null && b !== undefined && b._isBuffer)\n}\n\nBuffer.byteLength = function (str, encoding) {\n  var ret\n  str = str + ''\n  switch (encoding || 'utf8') {\n    case 'hex':\n      ret = str.length / 2\n      break\n    case 'utf8':\n    case 'utf-8':\n      ret = utf8ToBytes(str).length\n      break\n    case 'ascii':\n    case 'binary':\n    case 'raw':\n      ret = str.length\n      break\n    case 'base64':\n      ret = base64ToBytes(str).length\n      break\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      ret = str.length * 2\n      break\n    default:\n      throw new Error('Unknown encoding')\n  }\n  return ret\n}\n\nBuffer.concat = function (list, totalLength) {\n  assert(isArray(list), 'Usage: Buffer.concat(list, [totalLength])\\n' +\n      'list should be an Array.')\n\n  if (list.length === 0) {\n    return new Buffer(0)\n  } else if (list.length === 1) {\n    return list[0]\n  }\n\n  var i\n  if (typeof totalLength !== 'number') {\n    totalLength = 0\n    for (i = 0; i < list.length; i++) {\n      totalLength += list[i].length\n    }\n  }\n\n  var buf = new Buffer(totalLength)\n  var pos = 0\n  for (i = 0; i < list.length; i++) {\n    var item = list[i]\n    item.copy(buf, pos)\n    pos += item.length\n  }\n  return buf\n}\n\n// BUFFER INSTANCE METHODS\n// =======================\n\nfunction _hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  assert(strLen % 2 === 0, 'Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; i++) {\n    var byte = parseInt(string.substr(i * 2, 2), 16)\n    assert(!isNaN(byte), 'Invalid hex string')\n    buf[offset + i] = byte\n  }\n  Buffer._charsWritten = i * 2\n  return i\n}\n\nfunction _utf8Write (buf, string, offset, length) {\n  var charsWritten = Buffer._charsWritten =\n    blitBuffer(utf8ToBytes(string), buf, offset, length)\n  return charsWritten\n}\n\nfunction _asciiWrite (buf, string, offset, length) {\n  var charsWritten = Buffer._charsWritten =\n    blitBuffer(asciiToBytes(string), buf, offset, length)\n  return charsWritten\n}\n\nfunction _binaryWrite (buf, string, offset, length) {\n  return _asciiWrite(buf, string, offset, length)\n}\n\nfunction _base64Write (buf, string, offset, length) {\n  var charsWritten = Buffer._charsWritten =\n    blitBuffer(base64ToBytes(string), buf, offset, length)\n  return charsWritten\n}\n\nfunction _utf16leWrite (buf, string, offset, length) {\n  var charsWritten = Buffer._charsWritten =\n    blitBuffer(utf16leToBytes(string), buf, offset, length)\n  return charsWritten\n}\n\nBuffer.prototype.write = function (string, offset, length, encoding) {\n  // Support both (string, offset, length, encoding)\n  // and the legacy (string, encoding, offset, length)\n  if (isFinite(offset)) {\n    if (!isFinite(length)) {\n      encoding = length\n      length = undefined\n    }\n  } else {  // legacy\n    var swap = encoding\n    encoding = offset\n    offset = length\n    length = swap\n  }\n\n  offset = Number(offset) || 0\n  var remaining = this.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n  encoding = String(encoding || 'utf8').toLowerCase()\n\n  var ret\n  switch (encoding) {\n    case 'hex':\n      ret = _hexWrite(this, string, offset, length)\n      break\n    case 'utf8':\n    case 'utf-8':\n      ret = _utf8Write(this, string, offset, length)\n      break\n    case 'ascii':\n      ret = _asciiWrite(this, string, offset, length)\n      break\n    case 'binary':\n      ret = _binaryWrite(this, string, offset, length)\n      break\n    case 'base64':\n      ret = _base64Write(this, string, offset, length)\n      break\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      ret = _utf16leWrite(this, string, offset, length)\n      break\n    default:\n      throw new Error('Unknown encoding')\n  }\n  return ret\n}\n\nBuffer.prototype.toString = function (encoding, start, end) {\n  var self = this\n\n  encoding = String(encoding || 'utf8').toLowerCase()\n  start = Number(start) || 0\n  end = (end !== undefined)\n    ? Number(end)\n    : end = self.length\n\n  // Fastpath empty strings\n  if (end === start)\n    return ''\n\n  var ret\n  switch (encoding) {\n    case 'hex':\n      ret = _hexSlice(self, start, end)\n      break\n    case 'utf8':\n    case 'utf-8':\n      ret = _utf8Slice(self, start, end)\n      break\n    case 'ascii':\n      ret = _asciiSlice(self, start, end)\n      break\n    case 'binary':\n      ret = _binarySlice(self, start, end)\n      break\n    case 'base64':\n      ret = _base64Slice(self, start, end)\n      break\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      ret = _utf16leSlice(self, start, end)\n      break\n    default:\n      throw new Error('Unknown encoding')\n  }\n  return ret\n}\n\nBuffer.prototype.toJSON = function () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function (target, target_start, start, end) {\n  var source = this\n\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (!target_start) target_start = 0\n\n  // Copy 0 bytes; we're done\n  if (end === start) return\n  if (target.length === 0 || source.length === 0) return\n\n  // Fatal error conditions\n  assert(end >= start, 'sourceEnd < sourceStart')\n  assert(target_start >= 0 && target_start < target.length,\n      'targetStart out of bounds')\n  assert(start >= 0 && start < source.length, 'sourceStart out of bounds')\n  assert(end >= 0 && end <= source.length, 'sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length)\n    end = this.length\n  if (target.length - target_start < end - start)\n    end = target.length - target_start + start\n\n  var len = end - start\n\n  if (len < 100 || !Buffer._useTypedArrays) {\n    for (var i = 0; i < len; i++)\n      target[i + target_start] = this[i + start]\n  } else {\n    target._set(this.subarray(start, start + len), target_start)\n  }\n}\n\nfunction _base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction _utf8Slice (buf, start, end) {\n  var res = ''\n  var tmp = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    if (buf[i] <= 0x7F) {\n      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])\n      tmp = ''\n    } else {\n      tmp += '%' + buf[i].toString(16)\n    }\n  }\n\n  return res + decodeUtf8Char(tmp)\n}\n\nfunction _asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++)\n    ret += String.fromCharCode(buf[i])\n  return ret\n}\n\nfunction _binarySlice (buf, start, end) {\n  return _asciiSlice(buf, start, end)\n}\n\nfunction _hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; i++) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction _utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i+1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function (start, end) {\n  var len = this.length\n  start = clamp(start, len, 0)\n  end = clamp(end, len, len)\n\n  if (Buffer._useTypedArrays) {\n    return Buffer._augment(this.subarray(start, end))\n  } else {\n    var sliceLen = end - start\n    var newBuf = new Buffer(sliceLen, undefined, true)\n    for (var i = 0; i < sliceLen; i++) {\n      newBuf[i] = this[i + start]\n    }\n    return newBuf\n  }\n}\n\n// `get` will be removed in Node 0.13+\nBuffer.prototype.get = function (offset) {\n  console.log('.get() is deprecated. Access using array indexes instead.')\n  return this.readUInt8(offset)\n}\n\n// `set` will be removed in Node 0.13+\nBuffer.prototype.set = function (v, offset) {\n  console.log('.set() is deprecated. Access using array indexes instead.')\n  return this.writeUInt8(v, offset)\n}\n\nBuffer.prototype.readUInt8 = function (offset, noAssert) {\n  if (!noAssert) {\n    assert(offset !== undefined && offset !== null, 'missing offset')\n    assert(offset < this.length, 'Trying to read beyond buffer length')\n  }\n\n  if (offset >= this.length)\n    return\n\n  return this[offset]\n}\n\nfunction _readUInt16 (buf, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')\n    assert(offset !== undefined && offset !== null, 'missing offset')\n    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')\n  }\n\n  var len = buf.length\n  if (offset >= len)\n    return\n\n  var val\n  if (littleEndian) {\n    val = buf[offset]\n    if (offset + 1 < len)\n      val |= buf[offset + 1] << 8\n  } else {\n    val = buf[offset] << 8\n    if (offset + 1 < len)\n      val |= buf[offset + 1]\n  }\n  return val\n}\n\nBuffer.prototype.readUInt16LE = function (offset, noAssert) {\n  return _readUInt16(this, offset, true, noAssert)\n}\n\nBuffer.prototype.readUInt16BE = function (offset, noAssert) {\n  return _readUInt16(this, offset, false, noAssert)\n}\n\nfunction _readUInt32 (buf, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')\n    assert(offset !== undefined && offset !== null, 'missing offset')\n    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')\n  }\n\n  var len = buf.length\n  if (offset >= len)\n    return\n\n  var val\n  if (littleEndian) {\n    if (offset + 2 < len)\n      val = buf[offset + 2] << 16\n    if (offset + 1 < len)\n      val |= buf[offset + 1] << 8\n    val |= buf[offset]\n    if (offset + 3 < len)\n      val = val + (buf[offset + 3] << 24 >>> 0)\n  } else {\n    if (offset + 1 < len)\n      val = buf[offset + 1] << 16\n    if (offset + 2 < len)\n      val |= buf[offset + 2] << 8\n    if (offset + 3 < len)\n      val |= buf[offset + 3]\n    val = val + (buf[offset] << 24 >>> 0)\n  }\n  return val\n}\n\nBuffer.prototype.readUInt32LE = function (offset, noAssert) {\n  return _readUInt32(this, offset, true, noAssert)\n}\n\nBuffer.prototype.readUInt32BE = function (offset, noAssert) {\n  return _readUInt32(this, offset, false, noAssert)\n}\n\nBuffer.prototype.readInt8 = function (offset, noAssert) {\n  if (!noAssert) {\n    assert(offset !== undefined && offset !== null,\n        'missing offset')\n    assert(offset < this.length, 'Trying to read beyond buffer length')\n  }\n\n  if (offset >= this.length)\n    return\n\n  var neg = this[offset] & 0x80\n  if (neg)\n    return (0xff - this[offset] + 1) * -1\n  else\n    return this[offset]\n}\n\nfunction _readInt16 (buf, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')\n    assert(offset !== undefined && offset !== null, 'missing offset')\n    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')\n  }\n\n  var len = buf.length\n  if (offset >= len)\n    return\n\n  var val = _readUInt16(buf, offset, littleEndian, true)\n  var neg = val & 0x8000\n  if (neg)\n    return (0xffff - val + 1) * -1\n  else\n    return val\n}\n\nBuffer.prototype.readInt16LE = function (offset, noAssert) {\n  return _readInt16(this, offset, true, noAssert)\n}\n\nBuffer.prototype.readInt16BE = function (offset, noAssert) {\n  return _readInt16(this, offset, false, noAssert)\n}\n\nfunction _readInt32 (buf, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')\n    assert(offset !== undefined && offset !== null, 'missing offset')\n    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')\n  }\n\n  var len = buf.length\n  if (offset >= len)\n    return\n\n  var val = _readUInt32(buf, offset, littleEndian, true)\n  var neg = val & 0x80000000\n  if (neg)\n    return (0xffffffff - val + 1) * -1\n  else\n    return val\n}\n\nBuffer.prototype.readInt32LE = function (offset, noAssert) {\n  return _readInt32(this, offset, true, noAssert)\n}\n\nBuffer.prototype.readInt32BE = function (offset, noAssert) {\n  return _readInt32(this, offset, false, noAssert)\n}\n\nfunction _readFloat (buf, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')\n    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')\n  }\n\n  return ieee754.read(buf, offset, littleEndian, 23, 4)\n}\n\nBuffer.prototype.readFloatLE = function (offset, noAssert) {\n  return _readFloat(this, offset, true, noAssert)\n}\n\nBuffer.prototype.readFloatBE = function (offset, noAssert) {\n  return _readFloat(this, offset, false, noAssert)\n}\n\nfunction _readDouble (buf, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')\n    assert(offset + 7 < buf.length, 'Trying to read beyond buffer length')\n  }\n\n  return ieee754.read(buf, offset, littleEndian, 52, 8)\n}\n\nBuffer.prototype.readDoubleLE = function (offset, noAssert) {\n  return _readDouble(this, offset, true, noAssert)\n}\n\nBuffer.prototype.readDoubleBE = function (offset, noAssert) {\n  return _readDouble(this, offset, false, noAssert)\n}\n\nBuffer.prototype.writeUInt8 = function (value, offset, noAssert) {\n  if (!noAssert) {\n    assert(value !== undefined && value !== null, 'missing value')\n    assert(offset !== undefined && offset !== null, 'missing offset')\n    assert(offset < this.length, 'trying to write beyond buffer length')\n    verifuint(value, 0xff)\n  }\n\n  if (offset >= this.length) return\n\n  this[offset] = value\n}\n\nfunction _writeUInt16 (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    assert(value !== undefined && value !== null, 'missing value')\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')\n    assert(offset !== undefined && offset !== null, 'missing offset')\n    assert(offset + 1 < buf.length, 'trying to write beyond buffer length')\n    verifuint(value, 0xffff)\n  }\n\n  var len = buf.length\n  if (offset >= len)\n    return\n\n  for (var i = 0, j = Math.min(len - offset, 2); i < j; i++) {\n    buf[offset + i] =\n        (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n            (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function (value, offset, noAssert) {\n  _writeUInt16(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeUInt16BE = function (value, offset, noAssert) {\n  _writeUInt16(this, value, offset, false, noAssert)\n}\n\nfunction _writeUInt32 (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    assert(value !== undefined && value !== null, 'missing value')\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')\n    assert(offset !== undefined && offset !== null, 'missing offset')\n    assert(offset + 3 < buf.length, 'trying to write beyond buffer length')\n    verifuint(value, 0xffffffff)\n  }\n\n  var len = buf.length\n  if (offset >= len)\n    return\n\n  for (var i = 0, j = Math.min(len - offset, 4); i < j; i++) {\n    buf[offset + i] =\n        (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function (value, offset, noAssert) {\n  _writeUInt32(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeUInt32BE = function (value, offset, noAssert) {\n  _writeUInt32(this, value, offset, false, noAssert)\n}\n\nBuffer.prototype.writeInt8 = function (value, offset, noAssert) {\n  if (!noAssert) {\n    assert(value !== undefined && value !== null, 'missing value')\n    assert(offset !== undefined && offset !== null, 'missing offset')\n    assert(offset < this.length, 'Trying to write beyond buffer length')\n    verifsint(value, 0x7f, -0x80)\n  }\n\n  if (offset >= this.length)\n    return\n\n  if (value >= 0)\n    this.writeUInt8(value, offset, noAssert)\n  else\n    this.writeUInt8(0xff + value + 1, offset, noAssert)\n}\n\nfunction _writeInt16 (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    assert(value !== undefined && value !== null, 'missing value')\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')\n    assert(offset !== undefined && offset !== null, 'missing offset')\n    assert(offset + 1 < buf.length, 'Trying to write beyond buffer length')\n    verifsint(value, 0x7fff, -0x8000)\n  }\n\n  var len = buf.length\n  if (offset >= len)\n    return\n\n  if (value >= 0)\n    _writeUInt16(buf, value, offset, littleEndian, noAssert)\n  else\n    _writeUInt16(buf, 0xffff + value + 1, offset, littleEndian, noAssert)\n}\n\nBuffer.prototype.writeInt16LE = function (value, offset, noAssert) {\n  _writeInt16(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeInt16BE = function (value, offset, noAssert) {\n  _writeInt16(this, value, offset, false, noAssert)\n}\n\nfunction _writeInt32 (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    assert(value !== undefined && value !== null, 'missing value')\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')\n    assert(offset !== undefined && offset !== null, 'missing offset')\n    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')\n    verifsint(value, 0x7fffffff, -0x80000000)\n  }\n\n  var len = buf.length\n  if (offset >= len)\n    return\n\n  if (value >= 0)\n    _writeUInt32(buf, value, offset, littleEndian, noAssert)\n  else\n    _writeUInt32(buf, 0xffffffff + value + 1, offset, littleEndian, noAssert)\n}\n\nBuffer.prototype.writeInt32LE = function (value, offset, noAssert) {\n  _writeInt32(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeInt32BE = function (value, offset, noAssert) {\n  _writeInt32(this, value, offset, false, noAssert)\n}\n\nfunction _writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    assert(value !== undefined && value !== null, 'missing value')\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')\n    assert(offset !== undefined && offset !== null, 'missing offset')\n    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')\n    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n\n  var len = buf.length\n  if (offset >= len)\n    return\n\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n}\n\nBuffer.prototype.writeFloatLE = function (value, offset, noAssert) {\n  _writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function (value, offset, noAssert) {\n  _writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction _writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    assert(value !== undefined && value !== null, 'missing value')\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')\n    assert(offset !== undefined && offset !== null, 'missing offset')\n    assert(offset + 7 < buf.length,\n        'Trying to write beyond buffer length')\n    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n\n  var len = buf.length\n  if (offset >= len)\n    return\n\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n}\n\nBuffer.prototype.writeDoubleLE = function (value, offset, noAssert) {\n  _writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function (value, offset, noAssert) {\n  _writeDouble(this, value, offset, false, noAssert)\n}\n\n// fill(value, start=0, end=buffer.length)\nBuffer.prototype.fill = function (value, start, end) {\n  if (!value) value = 0\n  if (!start) start = 0\n  if (!end) end = this.length\n\n  if (typeof value === 'string') {\n    value = value.charCodeAt(0)\n  }\n\n  assert(typeof value === 'number' && !isNaN(value), 'value is not a number')\n  assert(end >= start, 'end < start')\n\n  // Fill 0 bytes; we're done\n  if (end === start) return\n  if (this.length === 0) return\n\n  assert(start >= 0 && start < this.length, 'start out of bounds')\n  assert(end >= 0 && end <= this.length, 'end out of bounds')\n\n  for (var i = start; i < end; i++) {\n    this[i] = value\n  }\n}\n\nBuffer.prototype.inspect = function () {\n  var out = []\n  var len = this.length\n  for (var i = 0; i < len; i++) {\n    out[i] = toHex(this[i])\n    if (i === exports.INSPECT_MAX_BYTES) {\n      out[i + 1] = '...'\n      break\n    }\n  }\n  return '<Buffer ' + out.join(' ') + '>'\n}\n\n/**\n * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.\n * Added in Node 0.12. Only available in browsers that support ArrayBuffer.\n */\nBuffer.prototype.toArrayBuffer = function () {\n  if (typeof Uint8Array !== 'undefined') {\n    if (Buffer._useTypedArrays) {\n      return (new Buffer(this)).buffer\n    } else {\n      var buf = new Uint8Array(this.length)\n      for (var i = 0, len = buf.length; i < len; i += 1)\n        buf[i] = this[i]\n      return buf.buffer\n    }\n  } else {\n    throw new Error('Buffer.toArrayBuffer not supported in this browser')\n  }\n}\n\n// HELPER FUNCTIONS\n// ================\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nvar BP = Buffer.prototype\n\n/**\n * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods\n */\nBuffer._augment = function (arr) {\n  arr._isBuffer = true\n\n  // save reference to original Uint8Array get/set methods before overwriting\n  arr._get = arr.get\n  arr._set = arr.set\n\n  // deprecated, will be removed in node 0.13+\n  arr.get = BP.get\n  arr.set = BP.set\n\n  arr.write = BP.write\n  arr.toString = BP.toString\n  arr.toLocaleString = BP.toString\n  arr.toJSON = BP.toJSON\n  arr.copy = BP.copy\n  arr.slice = BP.slice\n  arr.readUInt8 = BP.readUInt8\n  arr.readUInt16LE = BP.readUInt16LE\n  arr.readUInt16BE = BP.readUInt16BE\n  arr.readUInt32LE = BP.readUInt32LE\n  arr.readUInt32BE = BP.readUInt32BE\n  arr.readInt8 = BP.readInt8\n  arr.readInt16LE = BP.readInt16LE\n  arr.readInt16BE = BP.readInt16BE\n  arr.readInt32LE = BP.readInt32LE\n  arr.readInt32BE = BP.readInt32BE\n  arr.readFloatLE = BP.readFloatLE\n  arr.readFloatBE = BP.readFloatBE\n  arr.readDoubleLE = BP.readDoubleLE\n  arr.readDoubleBE = BP.readDoubleBE\n  arr.writeUInt8 = BP.writeUInt8\n  arr.writeUInt16LE = BP.writeUInt16LE\n  arr.writeUInt16BE = BP.writeUInt16BE\n  arr.writeUInt32LE = BP.writeUInt32LE\n  arr.writeUInt32BE = BP.writeUInt32BE\n  arr.writeInt8 = BP.writeInt8\n  arr.writeInt16LE = BP.writeInt16LE\n  arr.writeInt16BE = BP.writeInt16BE\n  arr.writeInt32LE = BP.writeInt32LE\n  arr.writeInt32BE = BP.writeInt32BE\n  arr.writeFloatLE = BP.writeFloatLE\n  arr.writeFloatBE = BP.writeFloatBE\n  arr.writeDoubleLE = BP.writeDoubleLE\n  arr.writeDoubleBE = BP.writeDoubleBE\n  arr.fill = BP.fill\n  arr.inspect = BP.inspect\n  arr.toArrayBuffer = BP.toArrayBuffer\n\n  return arr\n}\n\n// slice(start, end)\nfunction clamp (index, len, defaultValue) {\n  if (typeof index !== 'number') return defaultValue\n  index = ~~index;  // Coerce to integer.\n  if (index >= len) return len\n  if (index >= 0) return index\n  index += len\n  if (index >= 0) return index\n  return 0\n}\n\nfunction coerce (length) {\n  // Coerce length to a number (possibly NaN), round up\n  // in case it's fractional (e.g. 123.456) then do a\n  // double negate to coerce a NaN to 0. Easy, right?\n  length = ~~Math.ceil(+length)\n  return length < 0 ? 0 : length\n}\n\nfunction isArray (subject) {\n  return (Array.isArray || function (subject) {\n    return Object.prototype.toString.call(subject) === '[object Array]'\n  })(subject)\n}\n\nfunction isArrayish (subject) {\n  return isArray(subject) || Buffer.isBuffer(subject) ||\n      subject && typeof subject === 'object' &&\n      typeof subject.length === 'number'\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    var b = str.charCodeAt(i)\n    if (b <= 0x7F)\n      byteArray.push(str.charCodeAt(i))\n    else {\n      var start = i\n      if (b >= 0xD800 && b <= 0xDFFF) i++\n      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')\n      for (var j = 0; j < h.length; j++)\n        byteArray.push(parseInt(h[j], 16))\n    }\n  }\n  return byteArray\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(str)\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  var pos\n  for (var i = 0; i < length; i++) {\n    if ((i + offset >= dst.length) || (i >= src.length))\n      break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction decodeUtf8Char (str) {\n  try {\n    return decodeURIComponent(str)\n  } catch (err) {\n    return String.fromCharCode(0xFFFD) // UTF 8 invalid char\n  }\n}\n\n/*\n * We have to make sure that the value is a valid integer. This means that it\n * is non-negative. It has no fractional component and that it does not\n * exceed the maximum allowed value.\n */\nfunction verifuint (value, max) {\n  assert(typeof value === 'number', 'cannot write a non-number as a number')\n  assert(value >= 0, 'specified a negative value for writing an unsigned value')\n  assert(value <= max, 'value is larger than maximum value for type')\n  assert(Math.floor(value) === value, 'value has a fractional component')\n}\n\nfunction verifsint (value, max, min) {\n  assert(typeof value === 'number', 'cannot write a non-number as a number')\n  assert(value <= max, 'value larger than maximum allowed value')\n  assert(value >= min, 'value smaller than minimum allowed value')\n  assert(Math.floor(value) === value, 'value has a fractional component')\n}\n\nfunction verifIEEE754 (value, max, min) {\n  assert(typeof value === 'number', 'cannot write a non-number as a number')\n  assert(value <= max, 'value larger than maximum allowed value')\n  assert(value >= min, 'value smaller than minimum allowed value')\n}\n\nfunction assert (test, message) {\n  if (!test) throw new Error(message || 'Failed assertion')\n}\n\n}).call(this,require(\"km4Umf\"),typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {},require(\"buffer\").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],\"/../../../node_modules/gulp-browserify/node_modules/buffer/index.js\",\"/../../../node_modules/gulp-browserify/node_modules/buffer\")","(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){\n// shim for using process in browser\n\nvar process = module.exports = {};\n\nprocess.nextTick = (function () {\n    var canSetImmediate = typeof window !== 'undefined'\n    && window.setImmediate;\n    var canPost = typeof window !== 'undefined'\n    && window.postMessage && window.addEventListener\n    ;\n\n    if (canSetImmediate) {\n        return function (f) { return window.setImmediate(f) };\n    }\n\n    if (canPost) {\n        var queue = [];\n        window.addEventListener('message', function (ev) {\n            var source = ev.source;\n            if ((source === window || source === null) && ev.data === 'process-tick') {\n                ev.stopPropagation();\n                if (queue.length > 0) {\n                    var fn = queue.shift();\n                    fn();\n                }\n            }\n        }, true);\n\n        return function nextTick(fn) {\n            queue.push(fn);\n            window.postMessage('process-tick', '*');\n        };\n    }\n\n    return function nextTick(fn) {\n        setTimeout(fn, 0);\n    };\n})();\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n}\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\n\n}).call(this,require(\"km4Umf\"),typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {},require(\"buffer\").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],\"/../../../node_modules/gulp-browserify/node_modules/process/browser.js\",\"/../../../node_modules/gulp-browserify/node_modules/process\")","(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n}).call(this,require(\"km4Umf\"),typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {},require(\"buffer\").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],\"/../../../node_modules/ieee754/index.js\",\"/../../../node_modules/ieee754\")","(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){\nconsole.log('thanks!');\n\n}).call(this,require(\"km4Umf\"),typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {},require(\"buffer\").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],\"/fake_856e8b1a.js\",\"/\")"]}